TO DO:
Fix error when ETFlistsize > 1500
Improve README

Back-testing TODO:
Calculate portolio volatility
Compare with expected results (using Expected Return of 10% for example)
Investigate the effect of changing: n_etfs, rebalance_period, minimum_days_with_data, rolling_window, optimizer

PyPortfolioOpt optimizations:
Why is the leftover value so large for large initial values?
Look at other covariance matrix algorithms - Ledoit Wolf
Add constraints: maximum weight for single asset and maximum number of assets
Check L2 regularization (check if it changes the number of ETFs in the portfolio)

Future:
Select multiple filters at once
Allow to upload isin list as csv
Check if ETF list size can be reduced in backend so it doesn't use as much memory (or maybe write etfData to file and read it from there)
Add regime switching optimization
Add other filters: listings, region, sector, equity class (Maybe need to scrape justETF to get more information)


Unsolved questions:
Where to deploy? LRZ has a service that we could maybe use
Fix and understand "covariance matrix is non positive semidefinite" warning (Example: "IE00B99FL386", "LU2090062865", "IE00BFWFPY67", "IE00B7MXFZ59", "LU1291109616", "LU0659579063", "DE000A0D8Q23")
Returns don't seem correct (probably using wrong data)


Useful commands:

Mongo:
python -c "import mongoDB; mongoDB.clear_test_db()"
python retrieveData.py
data-pipeline/copy_test_db_to_prod_db.bat
MongoDB export: mongoexport -h localhost:2717 -d prod -c etfs -o etfData.json --jsonArray --pretty
MongoDB import: mongoimport "mongodb://34.89.148.57:2717" --jsonArray -d prod -c etfs --file etfData.json
mongodump --host %MONGO_DB_HOST% --db test
mongo --host %MONGO_DB_HOST% prod --eval "db.dropDatabase()"
mongorestore --host %MONGO_DB_HOST% --db prod dump/test

Docker:
docker build -t manuelmanso/etfoptimizer-optimizer:v1 src/.
docker push manuelmanso/etfoptimizer-optimizer:v1

docker build -t manuelmanso/etfoptimizer-frontend:v1 frontend/.
docker push manuelmanso/etfoptimizer-frontend:v1

Kubernetes:
kubectl apply -f frontend-deployment-and-service.yml -f mongo-db-deployment-and-service.yml -f optimizer-deployment-and-service.yml
kubectl rollout restart deployment/optimizer-deployment deployment/frontend-deployment

kubectl delete -f frontend-deployment-and-service.yml -f optimizer-deployment-and-service.yml
kubectl delete all --all

Report structure:

1. Introduction
2. Requirements
3. Financial Background
4. Implementation
5. Evaluation
6. Conclusion

