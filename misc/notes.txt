Questions:
Select multiple filters at once?
Error when there's only one ETF matching filters

TO DO:
Fix portfolio table columns
Order ETFs by sharpe ratio
Prices don't seem to be correct: figure out what's going on (last price doesn't match the data) (probably leading to Nan values when allocating shares)
Update pricing data
Improve README

Back-testing TODO:
Implement system to perform back-testing
Optimize portfolio starting on x date, reoptimizing every x days, based on last x days of data
Check final value
Compare with expected results
Plot results and compare with expected results

ETF data:
Fix incomplete historicalData (some etfs have data that is missing a lot of days in between days with data, but this shouldn't happen because all those days actually have data)
Setup way for pricing data to be updated by running a script (needs mongoDB location, eikon app key and justetfurl as inputs)
Maybe need to scrape justETF to get more information(listings)
Use etfDB in the future (or get the full list of ETFs from justETF)

Deployment:
Setup frontend server proxying for backend
Flask production WSGI server for deployment
Setup kubernetes using Google Kubernetes Engine
Use GCP database
Fix problems with deploying and simplify process. Automate deployment (how to configure .env dynammically)

PyPortfolioOpt optimizations:
Why is the leftover value so large for large initial values?
Look at other covariance matrix algorithms - Ledoit Wolf
Add constraints: maximum weight for single asset and maximum number of assets
Check L2 regularization (check if it changes the number of ETFs in the portfolio)

Future:
Check if ETF list size can be reduced in backend so it doesn't use as much memory (or maybe write etfData to file and read it from there)
Add regime switching optimization
Other filters: listings, region, sector, equity class


Unsolved questions:
Where to deploy? LRZ has a service that we could maybe use
Fix and understand "covariance matrix is non positive semidefinite" warning (Example: "IE00B99FL386", "LU2090062865", "IE00BFWFPY67", "IE00B7MXFZ59", "LU1291109616", "LU0659579063", "DE000A0D8Q23")